:PROPERTIES:
:ID:       3f746c7d-247f-4155-ba44-c9dd079a3918
:END:
#+title: VSD 
#+date:[2024-05-23 Thu 16:23]
#+filetags: CoureWork
#+options: toc: 4

* Table of Contents :toc:
- [[#vsd-day-1][VSD DAY 1]]
  - [[#openlane][OpenLane]]
  - [[#process-design-kit-pdk][Process Design Kit (PDK)]]
  -  [[#digital-standard-cell][Digital Standard Cell]]
  - [[#standard-cell-libraries][Standard Cell Libraries]]
  - [[#technology-libraries][Technology libraries]]
  - [[#lab-1-run-openlane][LAB 1: Run OpenLane]]
- [[#vsd-day-2][VSD DAY 2]]
  - [[#utilization-factor-and-aspect-ratio][Utilization Factor and Aspect Ratio]]
  - [[#pre-placed-cells][Pre-Placed Cells]]
  - [[#lab-2-run-floorplan][LAB 2: Run Floorplan]]
  - [[#netlist-binding-with-physical-cells][Netlist binding with physical cells]]
  - [[#lab-cont][LAB Cont..]]
  - [[#cell-design-flow][Cell Design Flow]]
  - [[#chareterization-flow][Chareterization Flow]]

* VSD DAY 1

The goal of day 1 is to install openlane via the lab manual and familiarize with the tool.

** OpenLane 

Openlane is collaboration software the includes multiple opensource tools to automate the steps involed in RTL to GDSII flow. The openlane can be installed from [[https://github.com/The-OpenROAD-Project/OpenLane][GitHub]], this [[https://woset-workshop.github.io/PDFs/2020/a21.pdf][Paper]] discussing it two main uses case:
1. Harderning a macro 
2. Integrating a System-on-Chip (SoC).

#+name: OpenLane Flow
#+caption: Figure 1: OpenLan Flow
#+attr_html: : width 600px
[[~/OrgFiles/orgRoam/resources/VSD_Day1_openLane_flow.png]]


For each design step in the ASIC desing flow an equivalent open source tool is utilized to accomplish the task. The open source tool list for each design step is as follows according to [[https://www.semanticscholar.org/paper/Building-OpenLANE%3A-A-130nm-OpenROAD-based-Tapeout-%3A-Shalan-Edwards/512e49a704bb9f461a7ee12edd0639b29f8a4976][Paper]]:

| Desing Step         | EDA Tool                  |
| ------------------- | ------------------------- |
| Logic Synthesis     | Yosys and ABC             |
| DFT Scan Insertion  | Fault                     |
| DFT ATPG            | Fault                     |
| Formal verification | Yosys                     |
| Placement           | RePlAce and OpenDP        |
| Routing             | FastRoute and TritonRoute |
| CTS                 | TritonCTS                 |
| Extraction          | Magic                     |
| Timing Analysis     | OpenSTA                   |
| Chip Floorplanning  | PADGen                    |
| LVS                 | Netgen                    |
| DRC                 | Magic                     |
| GDS Streaming Out   | Magic                     |


From Figure 1, the OpenLane tool requires two catergories of files: 
1. Design Files: These are the RTL files that are written by an RTL design engineer.
2. PDKs: Process Design Kit (PDK) is a set of files used to model a fabrication process. Generally, the PDK files are degined by a foundary with a certain technology.

** Process Design Kit (PDK)
The OpenLane tools uses PDKs from SkyWater 130nm process. The complete documentation for SkyWater SKY130 PDK can be found [[https://skywater-pdk.readthedocs.io/en/main/index.html][here]].

The nomenclature used to identify SKY130 PDK is as follows:

<process name>_<library_source_abbreviation>_<library_type_abbreviation>[_library_name]

- Process name: is the name of the process technology and is always "sky130".

- Library source abbreviation: specifies the foundry source of the library. The table below shows the list of the library sources:
| Library source            | Library source abbreviation |
|---------------------------+-----------------------------|
| SkyWater                  | fd                          |
| Efabless                  | ef                          |
| Oklahoma State University | osu                         |

- Library type abbreviation: content found in the library, the table below shows the list of abbreviations:
  | Library type                   | Library type abbreviation |
  |--------------------------------+---------------------------|
  | Primitive cell                 | pr                        |
  | Digital Standard cell          | sc                        |
  | Build Space (flash, SRAM, etc) | bd                        |
  | IO and Preiphery               | io                        |
  | Miscellaneous                  | xx                        |
  
- Library name: is a the representation of the type of content found in the library. 

**  Digital Standard Cell 

- sky130_fd_sc_hd: SKY130 High Density Digital Cells
- sky130_fd_sc_hdll: SKY130 High Density Low Leakage Digital Standard Cells
- sky130_fd_sc_hs: SKY130 High Speed Digital Standard Cells
- sky130_fd_sc_ls: SKY130 Low Speed Digital Standard Cells
- sky130_fd_sc_ms: SKY130 Medium Speed Digital Standard Cells

From the name it can be seen that all the standard cells libraries are provided by SkyWater.

** Standard Cell Libraries
Digital Standard Cells can found in a folder called "~/tools/openlane_working_dir/pdks/skywater-pdk/libraries/". Among the available standard cells let us look at a high density two input AND gate in the folder "sky130_fc_sc_hd/latest/cells".

#+name: AND Gate Symbol
#+caption: Figure 2: AND Gate Cell Symbol
#+attr_html: :width 600px

[[./resources/VSD_Day1_and2.png]]

#+name: source code
#+caption: Verilog Behavioral code for two input AND Gate

#+begin_src verilog
/*
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
*/


`ifndef SKY130_FD_SC_HD__AND2_BEHAVIORAL_PP_V
`define SKY130_FD_SC_HD__AND2_BEHAVIORAL_PP_V

/**
 * and2: 2-input AND.
 *
 * Verilog simulation functional model.
 */

`timescale 1ns / 1ps
`default_nettype none

// Import user defined primitives.
`include "../../models/udp_pwrgood_pp_pg/sky130_fd_sc_hd__udp_pwrgood_pp_pg.v"

`celldefine
module sky130_fd_sc_hd__and2 (
    X   ,
    A   ,
    B   ,
    VPWR,
    VGND,
    VPB ,
    VNB
);

    // Module ports
    output X   ;
    input  A   ;
    input  B   ;
    input  VPWR;
    input  VGND;
    input  VPB ;
    input  VNB ;

    // Local signals
    wire and0_out_X       ;
    wire pwrgood_pp0_out_X;

    //                                 Name         Output             Other arguments
    and                                and0        (and0_out_X       , A, B                  );
    sky130_fd_sc_hd__udp_pwrgood_pp$PG pwrgood_pp0 (pwrgood_pp0_out_X, and0_out_X, VPWR, VGND);
    buf                                buf0        (X                , pwrgood_pp0_out_X     );

endmodule
`endcelldefine

`default_nettype wire
`endif  // SKY130_FD_SC_HD__AND2_BEHAVIORAL_PP_V

#+end_src

** Technology libraries

 To run the 

** LAB 1: Run OpenLane

*** Task: Synthesize picorv32a design and find the flop ratio. 

1. Open a terminal in "~/Desktop/work/tools/openlane_working_dir/openlane" and excute "docker" and the "./flow.tcl -interactive" and add required packages. See the figure below for more information.

#+attr_html: :width 600px
[[./resources/VSD_Day1_openlane.png]]


Picorv32a is simple risc-v processor core present in the "design" dicrectory. Before synthesizing the design prep the design so that it links to all the tech file and lib files for the design to be synthesized.
2. Execute "prep -design picorv32a".
[[./resources/VSD_Day1_prep.png]]
3. Run synthesis by executing "run_synthesis"
[[./resources/VSD_Day1_syn.png]]
The total number of cells is 14876 and the number of D-FF utilized is 1613, therefore, the flop ratio is 10.84%. 

* VSD DAY 2

The goal of day 2 is understand floorplane.

** Utilization Factor and Aspect Ratio

Setting the width and height of the die is the first and important step to understand how much cells can fit in the die. Gate level netlist provides the necessary information regarding the connectivity of the design. Dimensions of the chips depends on the dimensions of the logic gates. Each gate is defined with length and breadth of the gates. 

Utilization factor (UF) = Area occupie dby netlist / Total area of the core.

Apect Ratio (AR) =  height / width.

Suppose height and width of a logic cell is 1 unit each, the UF and AR is 1 sq unit or 100% utlization factor. Generally, 100% utliziation factor is not advisible as there is should be some space left for routing.

[[./resources/die_core.png]]

[[./resources/die_core2.png]]



** Pre-Placed Cells

Cells that are used multiples are implemented once and can be reduced. Some of the cells that can be implemented once and reused multiple times are memory, clock-gating cell, comparator, etc. These cells must be placed in such a way it can be used multiple times by the design and are called pre-laced cells. Placement of these cells will be fixed and will be done before placing the logic. PnR tool will not optimize the placement of these cells.

*** De-coupling Capacitor 
De-coupling capacitor enusre the logic cells receives enough voltage so that the outputs lie wihtin the noise margins. There will be a potential drop across the wire due to resistance and capcitance because of with the logic cell may not receive the full scale voltage to function. If the voltage drop is below the noise margin then the cell will not turn on or turn off correctly. De-coupling capacitor is place closed to the cell so that this capacitor will compensate for the voltage drop. These capacitors must be place close to all the pre-placed cells to enure full scale voltage.

[[./resources/de_couple.png]]



[[./resources/de_couple2.png]]



*** Power Planning

De-coupling capacitor takes care of all the pre-placed cells but what about logic cells? It is not fessible to place de-coupling capacitors around all the logic cells. It is important to place the VDD and VSS in such a way the distance between the logic cells and the voltage souce is as minimum as possible. To achieve this the VDD and VSS metals are run throughout the chip with taps, the logic cells receive power from the closest source. 

Ground bounce and voltage droop occurs when a single voltage source is used for multiple logic cells. To aviod this multiple rails of VDD and VSS is used as shown in figure below.


[[./resources/pwr_plan.png]]



[[./resources/pwr_plan2.png]]



** LAB 2: Run Floorplan

set die are, core aspect ratio pwer distributionnetwrok macro placement

1. You can run floorplan using the commnad "run_floorplan".
4. Run floorplan with the command "run_floorplan".
You can run floorplan using the commnad "
2. Go to "~/".
4. Run floorplan with the command "run_floorplan".DYou can run floorplan using the commnad "esktop/work/t".
4. Run floorplan with the command "run_floorplan".oYou can run floorplan using the commnad "ols/openlane_".working_dir/openlane/configuration" to open the README.md file. This file consists of floorplan switches, below tables describes some of the switches for the user.

- floorplan 
| Variable          | Description                                                                                                                                                |
|-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `FP_CORE_UTIL`    | The core utilization percentage.<br>(Default:`50`percent)                                                                                                  |
| `FP_ASPECT_RATIO` | The core's aspect ratio (height / width). <br> (Default: `1`)                                                                                              |
| `FP_SIZING`       | Whether to use relative sizing by making use of `FP_CORE_UTIL` or absolute one using `DIE_AREA`. <br> (Default: `"relative"` - accepts "absolute" as well) |
| `DIE_AREA`        | Specific die area to be used in floorplanning. Specified as a 4-corner rectangle. Units in mm <br> (Default: unset)                                        |
| `FP_IO_HMETAL`    | The metal layer on which to place the io pins horizontally (top and bottom of the die). <br>(Default: `4`)                                                 |
| `FP_IO_VMETAL`    | The metal layer on which to place the io pins vertically (sides of the die) <br> (Default: `3`)                                                            |
| `FP_IO_MODE`      | Decides the mode of the random IO placement option. 0=matching mode, 1=random equidistant mode <br> (Default: `1`)                                         |
| ...               | ....                                                                                                                                                       |
| ...               | ....                                                                                                                                                       |
| ...               | ....                                                                                                                                                       |

3. The floorplan switches can be customized with the help of "~/Dekstop/work/tools/openlane_working_dir/openlane/configuration/floorplan.tcl" file. This will is will have some default parameters which can be changed. Apart from this file there are two other files where the configurations can be set i.e., "config.tcl" and "sky130A_sky130_fd_sc_hd_config.tcl" located at "~/Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a". The later file has the highest precedence over config.tcl and config.tcl has higher precedence over floorplan.tcl.

NOTE: In the openlane flow the vertical and horizontal metal has one metal layer more than what is specified the in the configuration.

"sky130A_sky13_fd_sc_hd_config.tcl" is edited as follows as it has the highest precedence. In the file the aspect ratio is set 0.5 and the core utilization is set as 55%.
#+begin_src tcl
# SCL Configs
set ::env(GLB_RT_ADJUSTMENT) 0.1

set ::env(SYNTH_MAX_FANOUT) 6
set ::env(CLOCK_PERIOD) "12.000"
set ::env(FP_CORE_UTIL) "55"
set ::env(FP_IO_VMETAL) "4"
set ::env(FP_IO_HMETAL) "3"
set ::env(FP_ASPECT_RATIO) "0.5"
set ::env(PL_TARGET_DENSITY) [ expr ($::env(FP_CORE_UTIL)+5) / 100.0 ]
#+end_src

4. Run floorplan with the command "run_floorplan".

The updated config.tcl is located in "~/Desktop/work/tools/openlane_worling_dir/openlane/designs/picorv32a/run/{date}/sky130A_sky130_fd_sc_hd_config.tcl". The {date} folder is the folder with the name as the date which the floorplan was run.

The updated floor_plan_config.tcl is shown below.

[[./resources/floor_plan_config.png]]


Aspect ratio is the ratio of height to width. Looking at "picorv32.floorplan.def" shown below, shows the die area. The die are is reperesented in cartesian coordinate system, therefore the length is 389.440 micron units and width is 746.405 micron units. Hence, the aspect ratio is 389.440/746.405 = 0.5215 ~ 0.5 as we set in the tcl file.

[[./resources/die_area.png]]


The die image is shown below.

[[./resources/die.png]]


5. Open magic tool to see the floorplan. Go inside the folder "~/Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/{date_folder}/results/floorplan" and open terminal and execute the command "magic -T /home/${USER}/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/magic/sky130A.tech lef read ../../tmp/merged.lef def read picorv32a.floorplan.def".


[[./resources/magic.png]] 

Even here it can be seen the aspect ratio is 0.5.

6. The vertical and horizontal metal layer is set as 4 and 3 respectively. Let us ensure that the right metal is being used for horizantal and vertical metal.  







** Netlist binding with physical cells

Each component in the netlist is represented a box with a width and height. These blocks are present in the library with all the information regarding timing and area, many more. Lets take an example of a netlist given in the figur below.

[[./resources/netlist1.png]]


In reality, each cell is represented as a box and its information regarding delay and area is stored a library file. This library will consist of various version of the same cell based on area and time as both are inversely propotional to each other. Figure below shows an example of the various versions of the cells for the netlist, based on the constraint certain cell will be picked from the library file.

[[./resources/netlist2.png]] 


Using the cells in library the given netlist will be placed in the floorplan as shown in figure below.

[[./resources/placement3.png]] 

It can be seen that the pre-paced cells are placed first and the logic is being placed in the remaining area. It is important to place the cells in such a way that the delay is least. Figure below shows the complete placement of the logic cells. Repeaters and buffers are added to endure there is no loss of data but adding them increasing area. Carefule consideration must be conducted in placing the cells.

[[./resources/placement4.png]]i


Placement of the logic cells must be optmized to produce the least delay and area.

[[./resources/placement5.png]]


** LAB Cont..

7. Congestion related placement. Excute "run_placement" to run placement, global placement occurs with this command.HPWL = Half paramenter wire length. reducition of HPWLis the main focus.

8. Open magic tool to see the placement. Go inside the folder "~/Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/{date_folder}/results/placement" and open terminal and execute the command "magic -T /home/${USER}/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/magic/sky130A.tech lef read ../../tmp/merged.lef def read picorv32a.placement.def".


